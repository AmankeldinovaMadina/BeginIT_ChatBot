import telebot
from telebot import types
import datetime as dt
from openpyxl import load_workbook

bot = telebot.TeleBot('6063588154:AAG_bZj0zI8dyxKkP-v-FVTMNoiiijTnze0')
admin_id = 334977381
dev_id = 660506419
message_admin = {}
workbook = load_workbook('messages.xlsx')
worksheet = workbook['Sheet1']
count = worksheet.max_row + 1


@bot.message_handler(commands=["start"])
def start(message):
    global count
    chat_id = message.chat.id
    worksheet[f'A{count}'].value = str(dt.datetime.now().date())
    worksheet[f'B{count}'].value = str(dt.datetime.now().time())[0:8]
    worksheet[f'C{count}'].value = f"{message.chat.first_name} {message.chat.last_name}"
    worksheet[f'D{count}'].value = message.chat.username
    
    app_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    app_markup.add(types.KeyboardButton('–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É ‚úâÔ∏è'))
    app_markup.add(types.KeyboardButton('–°–≤—è–∑–∞—Ç—å—Å—è ‚òéÔ∏è'), types.KeyboardButton('–°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ üîß'))
    chat_id = message.chat.id
    first_name = message.chat.first_name
    bot.send_sticker(chat_id, sticker=r'CAACAgIAAxkBAAEImRFkO3MzP7AWT8T1uuATaNRRLJav4gACHwADWbv8Jeo5dBvZPTaZLwQ')
    bot.send_message(chat_id, f"–ü—Ä–∏–≤–µ—Ç {first_name}!\n"
                     f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è!", reply_markup=app_markup)
    
@bot.message_handler(content_types=["text"])
def text(message):
    chat_id = message.chat.id
    if message.chat.type == 'private':
        if message.text == '–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É ‚úâÔ∏è':
            app_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            app_markup.add(types.KeyboardButton('–ò–Ω—Å—Ç–∏—Ç—É—Ç'))
            app_markup.add(types.KeyboardButton('–°—Ç—Ä—É–∫—Ç—É—Ä–∞'))
            bot.send_message(chat_id, "–ö–æ–≥–æ –≤—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç–µ?üëî", reply_markup=app_markup)
            
            bot.register_next_step_handler(message, select_level)
            
        elif message.text == '–°–≤—è–∑–∞—Ç—å—Å—è ‚òéÔ∏è':
            bot.send_message(chat_id, "–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã: \n–°–∞–Ω–¥–∂–∞—Ä: https://vk.com/karimovsan\n–ó–∞–º. –°–∞–Ω–¥–∂–∞—Ä–∞: https://vk.com/a1exandr0va")
        elif message.text == '–°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ üîß':
            bot.send_message(chat_id, "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å —Ä–∞–±–æ—Ç–æ–π –±–æ—Ç–∞ ‚öôÔ∏è:", reply_markup=types.ReplyKeyboardRemove())
            bot.register_next_step_handler(message, send_dev)


def send_admin(message):
    global count
    worksheet[f"M{count}"].value = message.text
    count += 1
    workbook.save("messages.xlsx")
    message_admin['partner'] = message.text
    first_name = message.chat.first_name
    chat_id = message.chat.id
    user_name = message.chat.username
    app_name, app_username = [], []
    app_name.append(first_name)
    app_username.append(user_name)
    if message_admin['info'] == '–ù–µ—Ç':
        bot.send_message(admin_id, f"–ü—Ä–∏—à–ª–∞ –∑–∞—è–≤–∫–∞ –æ—Ç {message.chat.first_name}!\n\n"
                                f"Username: {app_username[0]}\n"
                                f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {message_admin['who']}\n–£—Ä–æ–≤–µ–Ω—å: {message_admin['level']}\n–ö–æ—Ä–æ—Ç–∫–æ: {message_admin['short_about_event']}\n"
                                f"–î–∞—Ç–∞: {message_admin['date']}\n–°—Å—ã–ª–∫–∞: {message_admin['link']}\n–û—Ö–≤–∞—Ç: {message_admin['size']}\n"
                                f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {message_admin['count']}\n–ü–∞—Ä—Ç–Ω–µ—Ä—ã: {message_admin['partner']}")
    if message_admin['info'] == '–î–∞':
        bot.send_message(admin_id, f"–ü—Ä–∏—à–ª–∞ –∑–∞—è–≤–∫–∞!\n\n"
                                f"–æ—Ç: {message.chat.first_name}\n"
                                f"Username: @{app_username[0]}\n"
                                f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {message_admin['who']}\n–£—Ä–æ–≤–µ–Ω—å: {message_admin['level']}\n"
                                f"–ü–∞—Ä—Ç–Ω–µ—Ä—ã: {message_admin['partner']}")
        
    app_name.clear()
    app_username.clear()
    
    bot.send_message(chat_id, "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! ‚úÖ\n\n–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /start", reply_markup=types.ReplyKeyboardRemove())
    
def send_dev(message):
    chat_id = message.chat.id
    bot.send_message(dev_id, f"–ü–æ—Å—Ç—É–ø–∏–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞!\n\n"
                            f"–¢–µ–∫—Å—Ç: {message.text}\n\n"
                            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.chat.first_name}\n"
                            f"Username: @{message.chat.username}")
    bot.send_message(chat_id, f"–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º!\n–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å üôè\n\n–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /start")


@bot.message_handler(content_types=["text"])
def select_level(message):
    global count
    worksheet[f"E{count}"].value = message.text
    message_admin['who'] = message.text
    
    chat_id = message.chat.id
    app_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    app_markup.add(types.KeyboardButton('–†–¢'), types.KeyboardButton('–í–£–ó'))
    app_markup.add(types.KeyboardButton('–ò–Ω—Å—Ç–∏—Ç—É—Ç'))
    bot.send_message(chat_id, "–£—Ä–æ–≤–µ–Ω—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è üìä:", reply_markup=app_markup)
    message_admin['level'] = message.text
    bot.register_next_step_handler(message, select_info)

@bot.message_handler(content_types=["text"])
def select_info(message):
    global count
    worksheet[f'F{count}'].value = message.text
    message_admin['level'] = message.text
    
    chat_id = message.chat.id
    app_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    app_markup.add(types.KeyboardButton('–î–∞'))
    app_markup.add(types.KeyboardButton('–ù–µ—Ç'))
    bot.send_message(chat_id, "–ï—Å—Ç—å –∏–Ω—Ñ–æ—Å–ø—Ä–∞–≤–∫–∞? üìÉ", reply_markup=app_markup)
    bot.register_next_step_handler(message, select_info_yn)
    message_admin['info'] = message.text

@bot.message_handler(content_types=["document", "text"])
def select_info_yn(message):
    global count
    worksheet[f"G{count}"].value = message.text
    message_admin['info'] = message.text
    
    chat_id = message.chat.id
    if message.text == '–î–∞':
        bot.send_message(chat_id, "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ!\n–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º üìÅ", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, select_partner)
    elif message.text == '–ù–µ—Ç':
        bot.send_message(chat_id, "–ö–æ—Ä–æ—Ç–∫–æ —Ä–∞—Å–ø–∏—à–∏—Ç–µ –æ —Å–≤–æ–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ üìù: ", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, event_date)
    else:
        bot.register_next_step_handler(message, event_date)

@bot.message_handler(content_types=["text"])
def event_date(message):
    global count
    worksheet[f"H{count}"].value = message.text
    message_admin['short_about_event'] = message.text
    
    chat_id = message.chat.id
    bot.send_message(chat_id, "–î–∞—Ç–∞ –≤–∞—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è üìÖ: ", reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(message, event_link)

@bot.message_handler(content_types=["text"])
def event_link(message):
    global count
    worksheet[f"I{count}"].value = message.text
    message_admin['date'] = message.text
    
    chat_id = message.chat.id
    bot.send_message(chat_id, "–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è üîó: ", reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(message, event_size)

@bot.message_handler(content_types=["text"])
def event_size(message):
    global count
    worksheet[f"J{count}"].value = message.text
    message_admin['link'] = message.text
    
    chat_id = message.chat.id
    bot.send_message(chat_id, "–û—Ö–≤–∞—Ç —Å–æ—Ü —Å–µ—Ç–µ–π üì±: ", reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(message, event_count)

@bot.message_handler(content_types=["text"])
def event_count(message):
    global count
    worksheet[f"K{count}"].value = message.text
    message_admin['size'] = message.text
    
    chat_id = message.chat.id
    bot.send_message(chat_id, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ üë®‚Äçüë®‚Äçüëß‚Äçüëß: ", reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(message, select_partner)
    
@bot.message_handler(content_types=["document", "text"])
def select_partner(message):
    global count
    if message_admin['info'] == '–ù–µ—Ç':
        worksheet[f"L{count}"].value = message.text
        message_admin['count'] = message.text
    elif message_admin['info'] == '–î–∞':
        bot.send_message(admin_id, f"–ü—Ä–∏—à–ª–∞ –∏–Ω—Ñ–æ—Å–ø—Ä–∞–≤–∫–∞!\n\n"
                                    f"–û—Ç: {message.chat.first_name}\n"
                                    f"Username: @{message.chat.username}")
        
        try:
            bot.send_document(admin_id, message.document.file_id)
        except:
            bot.send_message(admin_id, '–£–ø—Å...üòê\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±—ã–ª –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª')
            
        first_name = message.chat.first_name
        chat_id = message.chat.id
        user_name = message.chat.username
        app_name, app_username = [], []
        app_name.append(first_name)
        app_username.append(user_name)
        app_name.clear()
        app_username.clear()
    
    chat_id = message.chat.id
    app_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    app_markup.add(types.KeyboardButton('–ø–∞—Ä—Ç–Ω–µ—Ä #1'), types.KeyboardButton('–ø–∞—Ä—Ç–Ω–µ—Ä #2'))
    app_markup.add(types.KeyboardButton('–ø–∞—Ä—Ç–Ω–µ—Ä #3'))
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ ü§ù", reply_markup=app_markup)
    message_admin['partner'] = message.text
    bot.register_next_step_handler(message, send_admin)


bot.polling(none_stop=True)